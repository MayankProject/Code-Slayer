generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String?
  username    String   @unique
  password    String
  submissions Submission[]
  arenaId     Int?
  arena       Arena?    @relation(fields: [arenaId], references: [id])
  standings   Standings[]
}

model Problem {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  TestCases         TestCase[]
  boilerplate       String
  testBiolerCode    String
  difficulty        Difficulty
  arenas            ArenaProblem[]
  submissions       Submission[]
}

model Submission {
  id          Int      @id @default(autoincrement())
  code        String
  language    String
  time        Int
  memory      Int
  status      Status
  submittedAt DateTime @default(now())
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  problemId   Int
  problem     Problem  @relation(fields: [problemId], references: [id])
  arenaId     Int
  arena       Arena    @relation(fields: [arenaId], references: [id])
}

model Arena {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  phase       Phase    @default(Lobby)
  description String
  duration    Int
  points      Int      @default(0)
  startTime   DateTime @default(now())
  problems    ArenaProblem[]
  endTime     DateTime
  users       User[]
  admin       Int
  timeLimit   Int      @default(1800)
  submissions Submission[]
  Standings   Standings[]
}

model ArenaProblem {
  id          Int      @id @default(autoincrement())
  problemId   Int
  problem     Problem  @relation(fields: [problemId], references: [id])
  arenaId     Int
  arena       Arena    @relation(fields: [arenaId], references: [id])
}

model TestCase {
  id          Int      @id @default(autoincrement())
  input       String
  output      String
  problemId   Int
  problem     Problem  @relation(fields: [problemId], references: [id])
}

model Standings {
  id          Int      @id @default(autoincrement())
  arenaId     Int
  arena       Arena    @relation(fields: [arenaId], references: [id])
  resigned    Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  points      Int      @default(0)
  @@unique([arenaId, userId])
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum Status {
  Accepted
}

enum Phase {
  Lobby
  Battle
}
